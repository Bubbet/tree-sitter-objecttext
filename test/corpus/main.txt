===
String
===
Test = "string"
---
(source_file
    (assignment
        (identifier)
        (value
            (string))))

===
Verbatim
===
Test = @"verbatim"
---
(source_file
    (assignment
        (identifier)
        (value
            (verbatim))))

===
Block
===
Test = {}
---
(source_file
    (block
        (identifier)))

===
List
===
Test = []
---
(source_file
    (list
        (identifier)))

===
Block Extension
===
Test : A {}
---
(source_file
    (block
        (identifier)
        (extension)))

===
List Extension
===
Test : A []
---
(source_file
    (list
        (identifier)
        (extension)))

===
Block Multi Extension
===
Test : A, B; C {}
---
(source_file
    (block
        (identifier)
        (extension)
        (extension)
        (extension)))


===
List Multi Extension
===
Test : A, B; C []
---
(source_file
    (list
        (identifier)
        (extension)
        (extension)
        (extension)))

===
Nesting
===
Block {
    List [
        []
        {}
        : A, <file.rules>/Path
        []
    ]
}
---
(source_file
    (block
        (identifier)
        (list
            (identifier)
            (value
                (list))
            (value
                (block))
            (value
                (list
                    (extension)
                    (extension))))))

===
Expressions
===
Sum = -0.1 + (&B) * 50d
---
(source_file
    (assignment
        (identifier)
        (value
            (binary_expression
                (unary_expression
                    (number))
                (add)
                (binary_expression
                    (unary_expression
                        (reference))
                    (mul)
                    (number))))))

===
Function Call
===
Test = ceil(0.5r, 50%)
---
(source_file
    (assignment
        (identifier)
        (value
            (function_call
                (identifier)
                (number)
                (number)))))

===
Bare String
===
BareString = this shit sucks balls man
---
(source_file
    (assignment
        (identifier)
        (value
            (bare_string))))

===
Weird Reference
===
WeirdAssReference = &../^/0/Test
---
(source_file
    (assignment
        (identifier)
        (value
            (reference))))

===
Identifier As Value
===
DrawProhibitedZoneCategories = [default]
---
(source_file
    (list
        (identifier)
        (value
            (identifier))))

===
Weird Extensions
===
Part : <base_part.rules>/Part
{
	ReceivableBuffs : ^/0/ReceivableBuffs [ Overclock ]
	BASE_THERMAL_PORT
	{
		RouteSource = &../HEAT_NETWORK_INPUT
	}
	
	Components : ^/0/Components
	{}
}
---
(source_file
    (block
        (identifier)
        (extension)
        (list
            (identifier)
            (extension)
            (value
                (identifier)))
        (block
            (identifier)
            (assignment
                (identifier)
                (value
                    (reference))))
        (block
            (identifier)
            (extension))))

===
Identifier As Value In Block
===
OverheatEffects
{
	Type = TriggeredEffects
}
---
(source_file
    (block
        (identifier)
        (assignment
            (identifier)
            (value
                (identifier)))))

===
Block Single Line ; Seperator
I dont know why this test fails, but it parses fine in prod
:skip
===
IsOperational { Type = StaticToggle; ToggleOn = true; }
---
(source_file
  (block
    (identifier)
    (assignment
      (identifier)
      (value
        (identifier)))
    (assignment
      (identifier)
      (value
        (bool
            (true))))))

===
Chinese String With FormatArgs

===
UploadingFmt = "正在上传至创意工坊……{0}%"
---
(source_file
    (assignment
        (identifier)
        (value
            (string))))

===
Chinese Bare String With Trailing ":"

===
Visibility = 可见：
---
(source_file
    (assignment
        (identifier)
        (value
            (bare_string))))

===
More Chinese Tests

===
FillIcon = 填充
Line = 直线
---
(source_file
    (assignment
        (identifier)
        (value
            (bare_string)))
    (assignment
        (identifier)
        (value
            (bare_string))))

===
Weird String Formatting

===
HeatCapacityFmt = "{0:#,0.#;;0} <gray>兆焦</gray>"
---
(source_file
    (assignment
        (identifier)
        (value
            (string))))

===
Assignment Weird Quote BareString
===
FameTitles = “不为人知”
---
(source_file
    (assignment
        (identifier)
        (value
            (bare_string))))

===
Weird Quote Bare String
===
FameTitles
[

	“不为人知”
]
---
(source_file
    (list
        (identifier)
        (value
            (bare_string))))

===
Extension With Reference Symbol
===
CloseButton : &~/MenuCategory
{}
---
(source_file
    (block
        (identifier)
        (extension)))

===
Weird Bool
===
IncrementButton : ^/0/IncrementButton { Active = false }
---
(source_file
    (block
        (identifier)
        (extension)
        (assignment
            (identifier)
            (value
                (bool
                    (false))))))

===
More Broken Chinese Bare Strings
===
Title = 截图与Gif
---
(source_file
    (assignment
        (identifier)
        (value
            (bare_string))))

===
Another Broken Chinese Bare String
===
ReputationTitles
[

	宿敌
	仇视
	敌人
	厌恶
	中立
	合作
	友好
	友军
	拥护
]
---
(source_file
    (list
        (identifier)
        (value
            (bare_string))
        (value
            (bare_string))
        (value
            (bare_string))
        (value
            (bare_string))
        (value
            (bare_string))
        (value
            (bare_string))
        (value
            (bare_string))
        (value
            (bare_string))
        (value
            (bare_string))))


===
Main
:skip
===
OverheatEffects
		{
			Type = TriggeredEffects
			Trigger = OverflowHeatStorage
			FactorHitEffectsWith = OverflowHeatStorage
			HitEffects
			[
				{
					Type = StatusApplication
					StatusType = cosmoteer.heat
					StatusValue
					{
						BaseValue = 1
						Modifiers
						[
							{
								Type = EffectScale
								ModificationMode = Multiply
							}
						]
					}
					ApplyToAllHitPartTiles = true
					DivideValueByPartArea = true
					Filter {
						Self = true
					}
				}
			]
		}
---
